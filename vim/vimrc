source ~/.vim/plugins.vim

set ai			"--autoindenting
set backspace=eol,indent,start "--make backspace key work
"--use OS clipboard
if has('mac')
	set clipboard=unnamed
else
	set clipboard=unnamedplus
endif
set cursorline "--highlight current line
set hlsearch		"--highlight search terms
set history=50		"--keep 50 lines of command history
set ignorecase		"--ignore case in search
set incsearch		"--Display the match for a search pattern halfway through typing it
set nocompatible	"--Use Vim advanced settings
set noexpandtab		"--Don't expand tabs to spaces
set number			"--show line number
set ruler		"--Show the cursor position all the time
set mouse=a "--support mouse in all modes
set shiftwidth=4	"--Number of spaces that a <Tab> in the file counts for
set showcmd		"--show partial of current command
set showmatch		"--show matching braces
"##set smarttab		"--Use smart tab sizes
set softtabstop=4	"--Number of spaces that a <Tab> in the file counts for
"##set spell
"##set spelllang=en
set tabstop=4		"--Number of spaces that a <Tab> in the file counts for
set undolevels=100	"--set number of undo's remembered
set wrapscan		"--search wraps around
"##spell checker
syntax on		"--syntax highlighting
filetype plugin indent on	"--detects filetype, loads appropriate options and indentation rules
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o "--disable auto comment
filetype indent off "--generic auto indent only

colorscheme koehler

"=====
"==keyboard
"=====
"--use space as leader key
map <space> <leader>
"--quicker ex mode access
noremap ; :
noremap <Space><Space> :
noremap <Leader>; ;
"--duplicate line / selection
nnoremap <leader>d :copy.<cr>
vnoremap <leader>d y`]p
"--search for selection in visual mode
vnoremap // y/<c-R>=escape(@", '/\')<cr><cr>
vnoremap / y/<c-R>=escape(@", '/\')<cr>

"==autocomplete
if exists("+omnifunc")
	set completeopt+=menuone,noinsert,noselect
	"--disable error when no matches found
	set shortmess+=c
	"--auto popup when three word characters in a row entered
	autocmd InsertCharPre * call TMAutopleteOnIns()
	fun! TMAutopleteOnIns()
		if len(&omnifunc) != 0
			\ && v:char =~ '\w'
			\ && getline('.')[col('.') - 3] =~ '\w'
			\ && getline('.')[col('.') - 2] =~ '\w'
			\ && getline('.')[col('.') - 1] !~ '\w'
			call feedkeys("\<C-x>\<C-o>", 'n')
		endif
	endfun
	"--close func def preview when ')' called to finish function call
	"-! not useful in all languages, but others would be much more complicated
	inoremap <expr> ) TMClosePreviewDone()
	fun! TMClosePreviewDone()
		for w in range(1, winnr('$'))
			if getwinvar(w, "&pvw") == 1
				call feedkeys("\<esc>:pclose\<CR>i\<right>", 'n')
			endif
		endfor
		return ")"
	endfun
	"--generic autocomplete
	"-! this only sort of works, not in all file types, not for all words, can be slow
	set omnifunc=syntaxcomplete#Complete
	"--hide line numbers in preview window
	autocmd WinEnter * call TMHidePreviewLN()
	fun! TMHidePreviewLN()
		if &pvw
			setlocal nonumber
		endif
	endfun
	"--tab to select first / current item
	inoremap <expr> <Tab> pumvisible() ? (complete_info()['selected'] == -1 ? "\<C-n>" : "\<C-y>") : "\<Tab>"
endif

"==buffers
"--toggle last
nnoremap <leader>b <C-^>

"==tabs
"--move tabs
"-@ https://stackoverflow.com/a/40919415/1139122
if has('gui_macvim')
	noremap <A-D-S-Left> :-tabmove<CR>
	inoremap <A-D-S-Left> <esc>:-tabmove<CR>i
	noremap <A-D-S-Right> :+tabmove<CR>
	inoremap <A-D-S-Right> <esc>:+tabmove<CR>i
endif

"--switch tabs via index
"-@ https://superuser.com/questions/382060/shortcut-to-switch-tabs-in-macvim
if has('gui_macvim')
	let i = 1
	while i <= 8
		exe 'noremap <D-' . i . '> :tabn ' . i . '<CR>'
		exe 'inoremap <D-' . i . '> <esc>:tabn ' . i . '<CR>i'
		let i += 1
	endwhile
	unlet i
	noremap <D-9> :tablast<CR>
	inoremap <D-9> <esc>:tablast<CR>i
endif

"==text
"--move lines
"-@ http://vim.wikia.com/wiki/Moving_lines_up_or_down
if has('gui_macvim')
	nnoremap <A-C-Down> :m .+1<CR>==
	inoremap <A-C-Down> <esc>:m .+1<CR>==gi
	vnoremap <A-C-Down> :m '>+1<CR>gv=gv
	nnoremap <A-C-Up> :m .-2<CR>==
	inoremap <A-C-Up> <esc>:m .-2<CR>==gi
	vnoremap <A-C-Up> :m '<-2<CR>gv=gv
endif

"==windows
"--quicker close/quit
"-! backspace in v mode to delete auto inserted range
nnoremap <leader>x :close<CR>
vnoremap <leader>x :<bs><bs><bs><bs><bs>close<CR>
nnoremap <leader>q :qa<CR>
vnoremap <leader>q :<bs><bs><bs><bs><bs>qa<CR>

"--quicker switch
nnoremap <leader>w <c-w><c-w>

"=====
"==file manager
"=====
"--hide instruction banner
let g:netrw_banner=0
"--move pwd with file manager
let g:netrw_keepdir=0
"--show human readable sizes
let g:netrw_sizestyle='h'
"--ignore case for sort
let g:netrw_sort_options="i"
"-! may switch to only use for gui mode
"if has('gui_running')
	"--auto-open
	fun! TJMAutoOpenVExplore()
		if argc() == 0 || !isdirectory(argv()[0])
			let g:netrw_winsize=25
			:Vexplore
			let g:netrw_winsize=75
		endif
		if argc() >= 1 && !isdirectory(argv()[0])
			call feedkeys("\<C-w>\<C-w>", 'n')
		endif
	endfunc
	augroup NetrwVexplore
		autocmd!
		autocmd VimEnter * :call TJMAutoOpenVExplore()
	augroup END
	"--vertical split 25 netrw, 75 file as preview
	let g:netrw_altv=1
	let g:netrw_browse_split=4
	let g:netrw_preview=1
	let g:netrw_winsize=75
"endif

"=====
"==styles
"=====

"--make it noticeable which mode I'm in
au InsertEnter * hi Normal term=reverse	guibg=#002200
au InsertLeave * hi Normal term=NONE	guibg=black

"--show whitespace
if has('patch-7.4.710')
	set listchars=conceal:?,eol:¬,extends:…,nbsp:␣,precedes:…,space:·,tab:»\ ,trail:•
else
	"-# older vim doesn't support `space`
	set listchars=conceal:?,eol:¬,extends:…,nbsp:␣,precedes:…,tab:»\ ,trail:•
endif
set list
highlight NonText ctermfg=darkGray guifg=gray43
highlight SpecialKey ctermfg=darkGray guifg=gray43

"--vcs
highlight GitGutterAdd ctermfg=green guifg=green
highlight GitGutterChange ctermfg=yellow guifg=yellow
highlight GitGutterDelete ctermfg=red guifg=red

"==languagues
"--less
au BufNewFile,BufRead *.less set filetype=less

"--twig
au BufRead,BufNewFile *.twig set syntax=htmljinja

"=====
"==term
"=====
"--load shell aliases, etc for !
let $BASH_ENV = "~/.vim/bashenv"

"--quick open
nnoremap <leader>1 :!
nnoremap <leader>t :term<cr>

"--no line numbers in term
augroup TJMTermNoNum
	autocmd!
	autocmd TerminalOpen * set nonu nornu
augroup END


"--switch term to normal mode
"-! only works when in insert mode, beeps if not
tnoremap <esc><esc> <C-\><C-n>

