"=====
"==general
"=====
"--load plugins.  load first so we can override
source ~/.vim/plugins.vim

"--Use Vim advanced settings
set nocompatible

"--prevent modelines for security reasons, lack of need
set nomodeline

"--auto reload external changes if no changes made in vim
set autoread
"---show message that buffer was updated
augroup TJMBufferRead
	autocmd!
	autocmd FileChangedShellPost * echohl WarningMsg | echo "'" .. expand('<afile>') .. "' updated to match file on disk " .. strftime('@%H:%M:%S on %m/%d', getftime(expand('<afile>'))) | echohl None
augroup END

"--my "plugins"
if exists("+omnifunc")
	source ~/.vim/autocomplete.vim
endif
source ~/.vim/colors.vim
source ~/.vim/commandp.vim
source ~/.vim/open.vim
source ~/.vim/projects.vim
source ~/.vim/quickkeys.vim

"=====
"==styles
"=====
"--show line numbers
set number

"--highlight current line
set cursorline

"--Show the cursor position all the time
set ruler

"--show last line that is truncated
set display=lastline

"--show whitespace
if has('patch-7.4.710')
	set listchars=conceal:?,eol:¬,extends:…,nbsp:␣,precedes:…,space:·,tab:»\ ,trail:•
else
	"-# older vim doesn't support `space`
	set listchars=conceal:?,eol:¬,extends:…,nbsp:␣,precedes:…,tab:»\ ,trail:•
endif
set list

"--wider width for wide characters
if has('gui_macvim')
	"-# doesn't seem to work in mac CLI version, not sure for others.  may need better `has()`
	"-# not helping most wide characters. Add double wides as needed
	"-# need listchars to be single width for ambiwidth
	call setcellwidths([
	\	str2list('…') + str2list('…') + [1],
	\	str2list('·') + str2list('·') + [1],
	\	str2list('•') + str2list('•') + [1]
	\])
	set ambiwidth=double
endif


"==languagues
"--less
augroup TJMLessLang
	autocmd!
	autocmd BufNewFile,BufRead *.less set filetype=less
augroup END

"--twig
augroup twig
	au!
	au BufRead,BufNewFile *.twig set syntax=htmldjango
augroup end


"=====
"==ex
"=====
"--keep 50 lines of command history
set history=50

"--"menu" for file/multi completions
set wildignorecase
set wildmenu
if has('patch-8.2.4325')
	set wildoptions=pum
endif
"---ignore some directories for file matching
"-! would be good to use .gitignore
set wildignore+=dist/*
set wildignore+=*/node_modules/*
set wildignore+=vendor/*

"--show partial of current command
set showcmd


"=====
"==keyboard/ui
"=====
"--use OS clipboard
if has('mac')
	set clipboard=unnamed
else
	set clipboard=unnamedplus
endif

"--prevent jumping to start of line when moving cursor
set nostartofline

"--prevent auto-insert of line breaks
set textwidth=0
"---ensure this survives any ftplugins
augroup TJMTextWidth
	autocmd!
	autocmd BufEnter * setlocal textwidth=0
augroup END

"--show matching braces
set showmatch

"--shift key plus motion selects in visual mode
set keymodel=startsel

"--make backspace key work
set backspace=eol,indent,start

"--delete keys delete in visual mode
xnoremap <bs> "dd
xnoremap <del> "dd

"--quicker ex mode access
noremap ; :
noremap <f2>; ;

"--emacs beginning / end keys
cnoremap <c-a> <home>
cnoremap <f2>a <c-a>
inoremap <c-a> <home>
inoremap <f2>a <c-a>
inoremap <c-e> <end>
inoremap <f2>e <c-e>

"--text indent
nnoremap <tab> >>
xnoremap <tab> >gv
nnoremap <s-tab> <<
xnoremap <s-tab> <gv
"---improve standard indent in visual mode
xnoremap < <gv
xnoremap > >gv

"--search for selection in visual mode
"-@ https://vi.stackexchange.com/a/6209
xnoremap / :<c-u>let @/=@"<cr>gvy:let [@/,@"]=[@",@/]<cr>/\V<c-r>=substitute(escape(@/,'/\'),'\n','\\n','g')<cr><cr>

"--set number of undo's remembered
set undolevels=100

"==buffers
"--allow hiding / switching away from modified buffers
set hidden

"==comments
"--disable filetype based auto-wrap of comments
set formatoptions-=c
"--disable filetype based auto-comment
set formatoptions-=o formatoptions-=r
"--ensure these survive any ftplugins
augroup TJMCommentFormatOpts
	autocmd!
	autocmd BufEnter * setlocal formatoptions-=c
	autocmd BufEnter * setlocal formatoptions-=o formatoptions-=r
augroup END

"--join single line comments nicely
set formatoptions+=j

"==gui
"--support mouse in all modes
set mouse=a

"--nicer scrolling for large wrapped lines
if has('patch-9.0.0640')
	set smoothscroll
endif

"--nicer scroll for nowrap lines
set sidescroll=1
set sidescrolloff=100

"==indent
"--auto indent
set ai
"--Don't expand tabs to spaces
set noexpandtab
"--generic auto indent only
filetype indent off
"--detects filetype, loads appropriate options and indentation rules
filetype plugin indent on
"--Number of spaces that a <Tab> in the file counts for
set softtabstop=4
set shiftwidth=4
set tabstop=4

"==leader
"--use space as leader key
map <space> <leader>
"--leader key in other modes
"-# must not be `nore` to allow leader key to work, except 'c'
"-! trying various options
imap <a-space> <c-o><leader>
map <a-space> <leader>
"cnoremap <f1> <esc><leader>
imap <f1> <c-o><leader>
inoremap <f2><f1> <help>
map <f1> <leader>
noremap <f2><f1> <help>
noremap <leader><f1> <help>

"==search
"--highlight search terms
set hlsearch
"--ignore case in search
set ignorecase
"--display search matches while typing
set incsearch
"--show found count of search results
set shortmess-=S
"--search wraps around
set wrapscan

"==spell check
set spelllang=en

"==statusline
"-# intersting colors: #Cursor# #CursorColumn# #DiffAdd# #GitGutterAddIntraLine# #Pmenu#
set laststatus=2
set statusline=%#TJMStatus#\ %02.n\ %{%TJMStatusLine()%}%#TJMStatus#\ %-6.(%l/%L,%c%V%)\ %*
fun! TJMStatusLine()
	let l:isCurrent = g:actual_curwin == win_getid(winnr())
	let l:hl = '%#' . (l:isCurrent ? 'TJMStatusMode' : 'DiffAdd') . '#'
	let l:sl = l:hl . ' '
	if &ft == 'help'
		let l:sl .= '%Y %* %f%='
	elseif &ft == 'netrw'
		let l:cd = expand('%:p')
		let projLen = exists('g:currentProj') ? strlen(g:currentProj) : 0
		if projLen > 0 && g:currentProj == l:cd[0:projLen-1]
			"--special handling of project paths
			let l:cd = substitute(l:cd, '^' . $TJM_PROJ_PATH . '/\([^/]\+\)/\(.*\)$', ':/\2', 'i')
		else
			let l:cd = substitute(l:cd, '^' . $HOME, '~', 'i')
		endif
		let l:sl .= 'DIR %* %<' . l:cd . '%='
	elseif &ft == 'fugitive' || &ft == 'gitcommit'
		let l:sl .= 'GIT %* %<' . substitute(getcwd(), '^' . $HOME, '~', 'i') . '%='
	else
		let l:sl .= (l:isCurrent ? toupper(mode()) : "-") . '%M %* '
		let l:sl .= '%<' . substitute(expand('%f'), '^' . getcwd() . '/\?', '', 'i') . ' %y%w%q%r %='
		if exists('b:tjmStatusLineDT')
			let l:sl .= '%#TJMStatusEtc# Mod: ' . b:tjmStatusLineDT . ' %#StatusLine# '
		endif
	endif
	if !empty(g:currentProjName)
		let l:sl .= '%#TJMStatusEtc# PROJ: ' .. g:currentProjName .. ' %#StatusLine# '
	endif
	return l:sl
endfun
"--cache file mod datetime for statusline
"-# don't want to be reading value constantly
fun! TJMSetStatusLineDT()
	if &ft != 'fugitive' && &ft != 'gitcommit' && &ft != 'help' && &ft != 'netrw'
		let l:ftime = getftime(expand('%:p'))
		if strftime('%Y') != strftime('%Y', l:ftime)
			let l:format = '%Y-%m-%d'
		elseif strftime('%m%d') != strftime('%m%d', l:ftime)
			let l:format = '%m-%d'
			if strftime('%m') == strftime('%m', l:ftime)
				let l:format .= ' %T'
			endif
		else
			let l:format = '%T'
		endif
		let b:tjmStatusLineDT = strftime(l:format, l:ftime)
	else
		let b:tjmStatusLineDT = ''
	endif
endfun
augroup TJMStatusDT
	autocmd!
	autocmd BufRead,BufWritePost * call TJMSetStatusLineDT()
augroup END


"==tabs
"--move tabs
"-@ https://stackoverflow.com/a/40919415/1139122
if has('gui_macvim')
	noremap <A-D-S-Left> :-tabmove<CR>
	inoremap <A-D-S-Left> <esc>:-tabmove<CR>i
	noremap <A-D-S-Right> :+tabmove<CR>
	inoremap <A-D-S-Right> <esc>:+tabmove<CR>i
endif

"--switch tabs via index
"-@ https://superuser.com/questions/382060/shortcut-to-switch-tabs-in-macvim
if has('gui_macvim')
	let i = 1
	while i <= 8
		exe 'noremap <D-' . i . '> :tabn ' . i . '<CR>'
		exe 'inoremap <D-' . i . '> <esc>:tabn ' . i . '<CR>i'
		let i += 1
	endwhile
	unlet i
	noremap <D-9> :tablast<CR>
	inoremap <D-9> <esc>:tablast<CR>i
endif
let i = 1
while i <= 8
	exe 'noremap <leader>' . i . ' :tabn ' . i . '<CR>'
	let i += 1
endwhile
unlet i
noremap <leader>9 :tablast<CR>

"==text
"--move lines
"-@ http://vim.wikia.com/wiki/Moving_lines_up_or_down
if has('gui_macvim')
	nnoremap <A-C-Down> :m .+1<CR>==
	inoremap <A-C-Down> <esc>:m .+1<CR>==gi
	vnoremap <A-C-Down> :m '>+1<CR>gv=gv
	nnoremap <A-C-Up> :m .-2<CR>==
	inoremap <A-C-Up> <esc>:m .-2<CR>==gi
	vnoremap <A-C-Up> :m '<-2<CR>gv=gv
endif

"==wrap
"--don't wrap mid-word
set linebreak


"=====
"==file manager
"=====
"--hide instruction banner
let g:netrw_banner=0
"--hide swap files in list
let g:netrw_list_hide= '.*\.swp$'
"--show human readable sizes
let g:netrw_sizestyle='h'
"--ignore case for sort
let g:netrw_sort_options="i"
"--open files in new tab by default
let g:netrw_browse_split = 3
"--open
if !exists('g:TMExploreWin')
	let g:TMExploreWin=0
endif
fun! TMExploreFn(fp = '')
	if !exists('g:TMExploreOn')
		let g:TMExploreOn=0
	endif
	if g:TMExploreOn != 0 && g:TMExploreWin != 0
		execute ':tabn ' . g:TMExploreOn
		if len(a:fp) != 0
			execute ':e ' . a:fp
		endif
	else
		execute ':0tab drop ' .. (len(a:fp) > 0 ? a:fp : '.')
		let g:TMExploreOn=tabpagenr()
		let g:TMExploreWin=win_getid()
	endif
endfun
augroup TJMExploreListen
	autocmd!
	autocmd WinClosed * if expand('<amatch>') == g:TMExploreWin | let g:TMExploreWin = 0 | endif
augroup END


"=====
"==term
"=====
"--load shell aliases, etc for !
let $BASH_ENV = "~/.vim/bashenv"

"--support colors in gui terminal
"-@ https://superuser.com/a/449959
"-! has weird extra <return> press required in some cases
if has('patch-9.0.0100') && has('gui')
	set guioptions+=!
endif

"--no line numbers in term
augroup TJMTermNoNum
	autocmd!
	autocmd TerminalOpen term://* set nonu nornu
augroup END

"--switch term to normal mode
"-! only works when in insert mode, beeps if not
tnoremap <esc><esc> <C-\><C-n>

"--load new instance in existing instance when opening from terminal
"-# requires special call from terminal, see `o` command
"-@ https://www.reddit.com/r/vim/comments/tkcxhq/how_to_open_a_file_in_the_current_neovimvim_from/
fun! Tapi_OpenInTab(bufnum, arglist)
	echo "opening " . a:arglist[0]
	for fn in a:arglist
		execute 'tab drop ' . fn
	endfor
endfun


"--function to surround current text with parens, etc



fun! TMSurroundFn(strstart, strend = v:null, mode = v:null)
	if a:mode is v:null
		let a:mode = mode()
	endif
	if a:strstart == '(' && a:strend is v:null
		let a:strend = ")"
	endif
	if a:mode == 'v'
		let start = getpos("'<")
		let end = getpos("'>")
		"execute ':keeppatterns lockmarks s/\%V\_.*\%V/' .. a:strstart .. '&' .. a:strend .. '/'
		"call setpos(".", start)
		call setpos(".", [0,5,5,0])
		"call feedkeys("\<esc>i" .. a:strstart .. "\<esc>", 'n')
		"call setpos(".", end)
		"call feedkeys('i' .. a:strend .. "\<esc>", 'n')
		"if col(".") == col("$") - 1
			"call feedkeys('i', 'n')
		"else
			"call feedkeys('li', 'n')
		"endif
	""--attempt to handle no selection
	else
		call feedkeys('i' .. (col(".") == col("$") - 1 ? '<right>' : '') .. a:strstart .. a:strend .. "\<esc>i", 'n')
	endif
endfun
"command! -nargs=+ -range TMSurround call TMSurroundFn(<args>)
"noremap <expr> <leader>( TMSurroundFn('(', ')')
"vnoremap <expr> <leader>( TMSurroundFn('(', ')', "v")
"(V=`git describe --tags --abbrev=0`)
