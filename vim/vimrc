source ~/.vim/plugins.vim

set ai			"--autoindenting
set backspace=eol,indent,start "--make backspace key work
"--use OS clipboard
if has('mac')
	set clipboard=unnamed
else
	set clipboard=unnamedplus
endif
set cursorline "--highlight current line
set hlsearch		"--highlight search terms
set history=50		"--keep 50 lines of command history
set ignorecase		"--ignore case in search
set incsearch		"--Display the match for a search pattern halfway through typing it
set nocompatible	"--Use Vim advanced settings
set noexpandtab		"--Don't expand tabs to spaces
set number			"--show line number
set ruler		"--Show the cursor position all the time
set mouse=a "--support mouse in all modes
set shiftwidth=4	"--Number of spaces that a <Tab> in the file counts for
set showcmd		"--show partial of current command
set showmatch		"--show matching braces
"##set smarttab		"--Use smart tab sizes
set smoothscroll "--nicer scrolling for large wrapped lines
set softtabstop=4	"--Number of spaces that a <Tab> in the file counts for
"##set spell
set spelllang=en
set tabstop=4		"--Number of spaces that a <Tab> in the file counts for
set undolevels=100	"--set number of undo's remembered
set wrapscan		"--search wraps around
"##spell checker
syntax on		"--syntax highlighting
filetype plugin indent on	"--detects filetype, loads appropriate options and indentation rules
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o "--disable auto comment
filetype indent off "--generic auto indent only

"--wider width for wide characters
if has('gui_macvim')
	"-# doesn't seem to work in mac CLI version, not sure for others.  may need better `has()`
	"-# not helping most wide characters. Add double wides as needed
	"-# need listchars to be single width for ambiwidth
	call setcellwidths([
	\	str2list('…') + str2list('…') + [1],
	\	str2list('·') + str2list('·') + [1],
	\	str2list('•') + str2list('•') + [1]
	\])
	set ambiwidth=double
endif

"=====
"==ex
"=====
"--"menu" for file/multi completions
set wildignorecase
set wildmenu
set wildoptions=pum
"--ignore some directories for file matching
set wildignore+=*/node_modules/*
set wildignore+=vendor/*

"=====
"==keyboard
"=====
"--shift key plus motion selects in visual mode
set keymodel=startsel

"--delete keys delete in visual mode
xnoremap <bs> "dd
xnoremap <del> "dd

"--quicker ex mode access
noremap ; :
noremap <f2>; ;

"--emacs beginning / end keys
cnoremap <c-a> <home>
cnoremap <f2>a <c-a>
inoremap <c-a> <home>
inoremap <f2>a <c-a>
inoremap <c-e> <end>
inoremap <f2>e <c-e>

"--text indent
nnoremap <tab> >>
xnoremap <tab> >gv
nnoremap <s-tab> <<
xnoremap <s-tab> <gv
"---improve standard indent in visual mode
xnoremap < <gv
xnoremap > >gv

"--search for selection in visual mode
"-@ https://vi.stackexchange.com/a/6209
xnoremap / :<c-u>let @/=@"<cr>gvy:let [@/,@"]=[@",@/]<cr>/\V<c-r>=substitute(escape(@/,'/\'),'\n','\\n','g')<cr><cr>

"==autocomplete
if exists("+omnifunc")
	set completeopt+=menuone,noinsert,noselect
	"--disable error when no matches found
	set shortmess+=c
	"--auto popup when three word characters in a row entered
	autocmd InsertCharPre * call TMAutopleteOnIns()
	fun! TMAutopleteOnIns()
		if len(&omnifunc) != 0
			\ && v:char =~ '\w'
			\ && getline('.')[col('.') - 3] =~ '\w'
			\ && getline('.')[col('.') - 2] =~ '\w'
			\ && getline('.')[col('.') - 1] !~ '\w'
			call feedkeys("\<C-x>\<C-o>", 'n')
		endif
	endfun
	"--close func def preview when ')' called to finish function call
	"-! not useful in all languages, but others would be much more complicated
	inoremap <expr> ) TMClosePreviewDone()
	fun! TMClosePreviewDone()
		for w in range(1, winnr('$'))
			if getwinvar(w, "&pvw") == 1
				call feedkeys("\<esc>:pclose\<CR>i\<right>", 'n')
			endif
		endfor
		return ")"
	endfun
	"--generic autocomplete
	"-! this only sort of works, not in all file types, not for all words, can be slow
	set omnifunc=syntaxcomplete#Complete
	"--hide line numbers in preview window
	autocmd WinEnter * call TMHidePreviewLN()
	fun! TMHidePreviewLN()
		if &pvw
			setlocal nonumber
		endif
	endfun
	"--tab to select first / current item
	inoremap <expr> <Tab> pumvisible() ? (complete_info()['selected'] == -1 ? "\<C-n>" : "\<C-y>") : "\<Tab>"
endif

"==buffers
"--allow hiding / switching away from modified buffers
set hidden

"==leader
"--use space as leader key
map <space> <leader>
"--leader key in other modes
"-# must not be `nore` to allow leader key to work, except 'c'
"-! trying various options
imap <a-space> <c-o><leader>
map <a-space> <leader>
"cnoremap <f1> <esc><leader>
imap <f1> <c-o><leader>
inoremap <f2><f1> <help>
map <f1> <leader>
noremap <f2><f1> <help>
noremap <leader><f1> <help>
"--window switch
nnoremap <Space><Space> <c-w><c-w>
"--select all
nnoremap <leader>a ggVG
"--toggle buffers
nnoremap <leader>b <C-^>
nnoremap <leader>B :buffers<cr>:b
nnoremap <s-space>B :buffers<cr>:b
"--duplicate line / selection
nnoremap <leader>d :copy.<cr>
xnoremap <leader>d y`]p
"--file sidebar
nnoremap <leader>f :TMexplore<cr>
nnoremap <leader>F :TMexplore<space>
nnoremap <s-space>F :TMexplore<space>
"--open
nnoremap <leader>o :tab drop **/
"--quit
noremap <leader>q :<c-u>qa<CR>
"--reveal in file browser (mac only)
if has('mac')
	nnoremap <silent> <leader>r :silent !open -R % &<cr>:redraw!<cr>
endif
"--save
noremap <leader>s :update<cr>
noremap <leader>ss :update<cr>
"--spell check
noremap <leader>sc :set spell!<CR>
"--open terminal
nnoremap <leader>! :!
nnoremap <leader>t :!
nnoremap <leader>T :term<cr>
"--window close
noremap <leader>w :<c-u>close<CR>
"--tab close
fun! TMCloseBuffer()
	let l:len = len(getbufinfo({'buflisted':1}))
	if &ft == 'help' && l:len < 2
		close
	else
		let l:tabs = tabpagenr('$')
		if l:len > 1 || l:tabs > 1 || &ft !=# 'netrw'
			bdelete
		endif
		if l:len <= 1 && &ft !=# 'netrw'
			Explore
		endif
	endif
endfun
noremap <leader>x :call TMCloseBuffer()<cr>
"-! confirm() when one?
"--yank all
noremap <leader>y :%y+<cr>
"--reload vimrc
nmap <leader>< :so ~/.vimrc<cr>:echo 'reloaded vimrc'<cr>
"--edit vimrc
nmap <leader>, :e ~/.vimrc<cr>
"--command mode
noremap <leader>; :
noremap <leader>: :
"--surround text with parens
"-! visual mode version should either leave selection selected or move to end of selection when done
nnoremap <expr> <leader>( 'i' . (col(".") == col("$") - 1 ? '<right>' : '') . '()<esc>i'
xnoremap <leader>( :keeppatterns lockmarks s/\%V\_.*\%V/(&)/<cr>
"--surround text with block
nnoremap <expr> <leader>[ 'i' . (col(".") == col("$") - 1 ? '<right>' : '') . '[]<esc>i'
xnoremap <leader>[ :keeppatterns lockmarks s/\%V\_.*\%V/[&]/<cr>
"--surround text with curly braces
nnoremap <expr> <leader>{ 'i' . (col(".") == col("$") - 1 ? '<right>' : '') . '{}<esc>i'
xnoremap <leader>{ :keeppatterns lockmarks s/\%V\_.*\%V/{&}/<cr>
"--surround text with single quotes
nnoremap <expr> <leader>' 'i' . (col(".") == col("$") - 1 ? '<right>' : '') . '\'\'<esc>i'
xnoremap <leader>' :keeppatterns lockmarks s/\%V\_.*\%V/'&'/<cr>
"--surround text with double quotes
nnoremap <expr> <leader>" 'i' . (col(".") == col("$") - 1 ? '<right>' : '') . '""<esc>i'
xnoremap <leader>" :keeppatterns lockmarks s/\%V\_.*\%V/"&"/<cr>
"--restore ; (movement repeat)
noremap <Leader>. ;

"==tabs
"--move tabs
"-@ https://stackoverflow.com/a/40919415/1139122
if has('gui_macvim')
	noremap <A-D-S-Left> :-tabmove<CR>
	inoremap <A-D-S-Left> <esc>:-tabmove<CR>i
	noremap <A-D-S-Right> :+tabmove<CR>
	inoremap <A-D-S-Right> <esc>:+tabmove<CR>i
endif

"--switch tabs via index
"-@ https://superuser.com/questions/382060/shortcut-to-switch-tabs-in-macvim
if has('gui_macvim')
	let i = 1
	while i <= 8
		exe 'noremap <D-' . i . '> :tabn ' . i . '<CR>'
		exe 'inoremap <D-' . i . '> <esc>:tabn ' . i . '<CR>i'
		let i += 1
	endwhile
	unlet i
	noremap <D-9> :tablast<CR>
	inoremap <D-9> <esc>:tablast<CR>i
endif
let i = 1
while i <= 8
	exe 'noremap <leader>' . i . ' :tabn ' . i . '<CR>'
	let i += 1
endwhile
unlet i
noremap <leader>9 :tablast<CR>

"==text
"--move lines
"-@ http://vim.wikia.com/wiki/Moving_lines_up_or_down
if has('gui_macvim')
	nnoremap <A-C-Down> :m .+1<CR>==
	inoremap <A-C-Down> <esc>:m .+1<CR>==gi
	vnoremap <A-C-Down> :m '>+1<CR>gv=gv
	nnoremap <A-C-Up> :m .-2<CR>==
	inoremap <A-C-Up> <esc>:m .-2<CR>==gi
	vnoremap <A-C-Up> :m '<-2<CR>gv=gv
endif

"=====
"==file manager
"=====
"--hide instruction banner
let g:netrw_banner=0
"--hide swap files in list
let g:netrw_list_hide= '.*\.swp$'
"--show human readable sizes
let g:netrw_sizestyle='h'
"--ignore case for sort
let g:netrw_sort_options="i"
"--sidebar
fun! TMExploreFn(...)
	if !exists('t:TMExploreOn')
		let t:TMExploreOn=0
	endif
	"--close sidebar if we think it's open, still exists, and not alone
	if t:TMExploreOn != 0 && win_id2win(t:TMExploreOn) != 0 && winnr('$') > 1
		call win_execute(t:TMExploreOn, 'close')
		let t:TMExploreOn=0
		"--revert some settings we can't immediately
		let g:netrw_browse_split=0
	else
		let g:netrw_altv=1
		let g:netrw_browse_split=4
		let g:netrw_preview=1
		let g:netrw_winsize=25
		if a:0 > 0
			execute ':Vexplore ' . join(a:000)
		else
			execute ':Vexplore'
		endif
		"---tree view
		call feedkeys('iii')
		"--revert settings to normal
		let g:netrw_altv=0
		let g:netrw_preview=0
		let g:netrw_winsize=50
		let t:TMExploreOn=win_getid()
	endif
endfun
command -nargs=* -complete=dir TMexplore call TMExploreFn('<args>')
"---ensure proper `netrw_browse_split` setting
"fun! TMExploreBrowseSplitSet()
	"if !exists('t:TMExploreOn')
		"let t:TMExploreOn=0
	"endif
	"if t:TMExploreOn != 0 && win_id2win(t:TMExploreOn) != 0
		"echo 'split 4'
		"let g:netrw_browse_split=4
	"else
		"echo 'split 0'
		"let g:netrw_browse_split=0
	"endif
"endfun
"augroup TJMExploreBrowseSplitSet
	"autocmd!
	"autocmd WinEnter * call TMExploreBrowseSplitSet()
"augroup END




"=====
"==styles
"=====

colorscheme koehler
highlight Normal ctermfg=lightgreen guifg=#b0ffb3
"--use our colorscheme if MacVim
if has('gui_macvim')
	let macvim_skip_colorscheme=1
endif

"--current line
highlight CursorLine guibg=#444444

"--make it noticeable which mode I'm in
au InsertEnter * hi Normal term=reverse	guibg=#002200
au InsertLeave * hi Normal term=NONE	guibg=black

"--show whitespace
if has('patch-7.4.710')
	set listchars=conceal:?,eol:¬,extends:…,nbsp:␣,precedes:…,space:·,tab:»\ ,trail:•
else
	"-# older vim doesn't support `space`
	set listchars=conceal:?,eol:¬,extends:…,nbsp:␣,precedes:…,tab:»\ ,trail:•
endif
set list
highlight NonText ctermfg=darkGray guifg=gray43
highlight SpecialKey ctermfg=darkGray guifg=gray43

"--vcs
highlight GitGutterAdd ctermfg=green guifg=green
highlight GitGutterChange ctermfg=yellow guifg=yellow
highlight GitGutterDelete ctermfg=red guifg=red

"==languagues
"--less
au BufNewFile,BufRead *.less set filetype=less

"--twig
augroup twig
	au!
	au BufRead,BufNewFile *.twig set syntax=htmldjango
augroup end

"=====
"==term
"=====
"--load shell aliases, etc for !
let $BASH_ENV = "~/.vim/bashenv"

"--no line numbers in term
augroup TJMTermNoNum
	autocmd!
	autocmd TerminalOpen * set nonu nornu
augroup END

"--switch term to normal mode
"-! only works when in insert mode, beeps if not
tnoremap <esc><esc> <C-\><C-n>

"--load new instance in existing instance when opening from terminal
"-@ https://www.reddit.com/r/vim/comments/tkcxhq/how_to_open_a_file_in_the_current_neovimvim_from/
if $tjmVimRunning
	autocmd BufNewFile,BufReadPre * exec 'bd | !printf "\033]51;[\"drop\", \"' . expand('%:p') . '\"]\007"' | q
else
	let $tjmVimRunning = 1
endif



"--function to surround current text with parens, etc



fun! TMSurroundFn(strstart, strend = v:null, mode = v:null)
	if a:mode is v:null
		let a:mode = mode()
	endif
	if a:strstart == '(' && a:strend is v:null
		let a:strend = ")"
	endif
	if a:mode == 'v'
		let start = getpos("'<")
		let end = getpos("'>")
		"execute ':keeppatterns lockmarks s/\%V\_.*\%V/' .. a:strstart .. '&' .. a:strend .. '/'
		"call setpos(".", start)
		call setpos(".", [0,5,5,0])
		"call feedkeys("\<esc>i" .. a:strstart .. "\<esc>", 'n')
		"call setpos(".", end)
		"call feedkeys('i' .. a:strend .. "\<esc>", 'n')
		"if col(".") == col("$") - 1
			"call feedkeys('i', 'n')
		"else
			"call feedkeys('li', 'n')
		"endif
	""--attempt to handle no selection
	else
		call feedkeys('i' .. (col(".") == col("$") - 1 ? '<right>' : '') .. a:strstart .. a:strend .. "\<esc>i", 'n')
	endif
endfun
"command! -nargs=+ -range TMSurround call TMSurroundFn(<args>)
"noremap <expr> <leader>( TMSurroundFn('(', ')')
"vnoremap <expr> <leader>( TMSurroundFn('(', ')', "v")
"(V=`git describe --tags --abbrev=0`)
