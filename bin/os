#!/bin/bash
#=====
# general grouping command for running OS level commands without needing to know which OS / window manager is being run
#=====

#==handle args
if [ -z "$1" ]; then
	cmd='version'
else
	cmd="$1"
fi
args=${@:2}

#==helpers
die(){
	>&2 echo "$@"
	exit 1
}
runPkg(){
	local cmd=""
	local sub="$1"
	local args=${@:2}

	#--find installed package manager command
	# debian mac fedora fedora arch bsd mac fedora
	#-# pkcon last because it seems to not find some packages, other problems
	declare -a cmds=(pkg apt brew dnf yum pacman port pkcon)
	for val in "${cmds[@]}"; do
		if hash "$val" 2> /dev/null; then
			cmd="$val"
			break
		fi
	done
	if [ -z "$cmd" ]; then
		die "don't know how to update"
	fi

	#--normalize subcommand
	if [ "$sub" = 'up' ] || [ "$sub" = 'update' ] || [ "$sub" = 'upgrade' ]; then
		case "$cmd" in
			'apt'|'pkcon')
				sub='update'
			;;
			'brew'|'dnf'|'pkg'|'port'|'yum')
				sub='upgrade'
			;;
			'pacman')
				sub='-Syu'
			;;
		esac
		if [ "$cmd" = 'brew' ] && [ -z "$args" ]; then
			args='--greedy'
		fi
	elif [ "$sub" = 'delete' ] || [ "$sub" = 'remove' ] || [ "$sub" = 'uninstall' ]; then
		case "$cmd" in
			'apt'|'dnf'|'yum')
				sub='remove'
			;;
			'brew')
				sub='uninstall'
			;;
			'pkg')
				sub='delete'
			;;
		esac
	elif [ "$sub" = 'get-details' ] || [ "$sub" = 'info' ] || [ "$sub" = 'show' ]; then
		case "$cmd" in
			'apt')
				sub='show'
			;;
			'pkcon')
				sub='get-details'
			;;
			*)
				sub='info'
			;;
		esac
	elif [ "$sub" = 'add' ] || [ "$sub" = 'install' ]; then
		case "$cmd" in
			'pkg')
				sub='add'
			;;
			*)
				sub='install'
			;;
		esac
	elif [ "$sub" = 'list' ]; then
		#--default to list of installed
		case $cmd in
			'apt')
				if [ -z "$args" ]; then
					args='--installed'
				fi
			;;
			'pkg')
				sub='list-installed'
			;;
		esac
	fi

	#--check permissions to run command
	#---homebrew must be owned by us to modify
	if [[ ("$cmd" == 'brew' && ! -O `which brew` && ("$sub" == 'install' || "$sub" == 'uninstall' || "$sub" == 'upgrade' )) ]]; then
		die "don't have permissions to run brew command"
	fi
	#---some must run as root
	if [[ "$EUID" != 0 && "$cmd" != 'brew' && "$cmd" != 'pkg' && ("$sub" == 'add' || "$sub" == 'delete' || "$sub" == 'install' || "$sub" == 'remove' || "$sub" == '-Syu' || "$sub" == 'update' || "$sub" == 'upgrade') ]]; then
		cmd="sudo ${cmd}"
	fi

	#--run
	$cmd $sub $args
}

#==main
case $cmd in
	'down'|'off'|'poweroff'|'shutdown') #: shut down computer / OS
		if command -v 'shutdown' > /dev/null; then
			if [ -z "$args" ]; then
				args='now'
			fi
			shutdown $args
		else
			die "don't know how to shutdown"
		fi
	;;
	'-h'|'h'|'help') #: show help for this command
		echo "Usage: os <subcommand> [options]"
		echo "os command must be run with one of the following subcommands"
		grep -o "'.*)\(\s*#.*\)\$" ${BASH_SOURCE[0]} | # grab formatted lines
			sed "s/'//g" | # strip quotes for terseness
			sed 's/^\(.*\))[ ]*#:/\1:/g' | # nicer formatting
			GREP_COLOR='01;32' grep --color '^.*:' # color subcommands
	;;
	'halt') #: halt computer / OS
		if command -v 'halt' > /dev/null; then
			halt $args
		else
			die "don't know how to halt"
		fi
	;;
	'hibernate'|'sleep'|'suspend') #: hibernate computer / OS
		#--mac
		if command -v 'pmset' > /dev/null; then
			pmset sleepnow $args
		else
			die "don't know how to sleep"
		fi
	;;
	'in'|'install') #: install OS package
		runPkg install $args
	;;
	'i'|'info'|'-v'|'v'|'version') #: get OS info, or package info with arg(s)
		if [ -z "$args" ]; then
			#--linux
			if command -v 'hostnamectl' > /dev/null; then
				if [ -r '/etc/os-release' ]; then
					source /etc/os-release
					if [ -n "$PRETTY_NAME" ]; then
						echo $PRETTY_NAME
					else
						echo $NAME $VERSION
					fi

				fi
				hostnamectl $args
			#--termux
			elif command -v 'termux-info' > /dev/null; then
				termux-info $args
			#--mac
			elif command -v 'sw_vers' > /dev/null; then
				sw_vers $args
				#-!super verbose and slow. do we want this?
				# if [ -z "$args" ]; then
					# args='-detailLevel mini'
				# fi
				# system_profiler $args | less
			fi
			echo 'WM: ' `getwm`
		else
			runPkg info $args
		fi
	;;
	'list'|'l') #: list OS packages
		runPkg list $args
	;;
	'lock'|'lockscreen') #: lock screen
		#--gnome
		if [ `getwm` = 'gnome' ] && command -v 'xdg-screensaver' > /dev/null; then
			xdg-screensaver lock
		#--i3
		elif [ `getwm` = 'i3' ] && command -v 'i3lock' > /dev/null; then
			i3lock $args
		#--mac
		elif command -v 'pmset' > /dev/null; then
			pmset displaysleepnow $args
		else
			die "don't know how to lock"
		fi
	;;
	'logout'|'out') #: log out
		#--gnome
		if [ `getwm` = 'gnome' ] && command -v 'gnome-session-quit' > /dev/null; then
			if [ -z "$args" ]; then
				args='--no-prompt'
			fi
			gnome-session-quit $args
		#--i3
		elif [ `getwm` = 'i3' ] && command -v 'i3-msg' > /dev/null; then
			i3-msg exit $args
		#--mac
		elif command -v 'osascript' > /dev/null; then
			osascript -e 'tell application "System Events" to log out'
			# launchctl bootout user/$(id -u)
		else
			logout
		fi
	;;
	'p'|'package'|'packages'|'pkg') #: run package manager command
		runPkg $args
	;;
	're'|'reboot'|'restart') #: reboot computer / OS
		if command -v 'reboot' > /dev/null; then
			reboot $args
		else
			die "don't know how to reboot"
		fi
	;;
	'remove'|'rm'|'uninstall') #: uninstall OS package
		runPkg remove $args
	;;
	's'|'search') #: search for OS packages
		runPkg search $args
	;;
	'up'|'update'|'upgrade') #: upgrade OS packages
		runPkg up $args
	;;
	*)
		die "Unknown os command ${cmd} command"
	;;
esac

