#!/bin/bash
binPath=`realpath $(dirname ${BASH_SOURCE[0]})`
if [ -z "$1" ]; then
	if [ -e ~/.dotfiles ]; then
		cmd='update'
	else
		cmd='init'
	fi
else
	cmd="$1"
fi
cd $binPath/..
case $cmd in
	'u'|'up'|'update') #: update dotfiles repository from upstream (ie `git pull`)
		echo 'updating dotfiles'
		git pull --autostash ${@:2}
	;;
	'h'|'help') #: show help for this command
		echo "Usage: dotfiles <subcommand> [options]"
		echo "dotfiles command must be run with one of the following subcommands"
		grep --color -o "'.*)\(\s*#.*\)\$" $binPath/dotfiles
	;;
	'i'|'info') #: show project readme
		less README.md
	;;
	'init'|'install') #: dotfiles install. must run again if any new files are added
		bash ${binPath}/../src/init.sh
	;;
	'bin') #: list bin commands
		cd bin
		if [ "$#" -lt 2 ]; then
			ls -1A
		else
			for arg in "${@:2}"; do
				ls -1A $arg*
			done
		fi
	;;
	'd'|'diff') #: show git diff of dotfiles repo
		git diff --color-words -w ${@:2}
	;;
	'e'|'edit') #: edit dotfiles file
		if [ -z $EDITOR ]; then
			EDITOR=vi
		fi
		$EDITOR ${binPath}/../${@:2}
	;;
	'g'|'git') #: run git command on dotfiles repo
		git ${@:2}
	;;
	'l'|'ls') #: list files in dotfiles repo
		ls -1AFh --color ${@:2}
	;;
	's'|'stat'|'status') #: get git status of dotfiles repo
		git status -bs ${@:2}
	;;
	'test'|'tests') #: run phpunit tests on dotfiles repo
		echo 'running tests'
		bash ${binPath}/../tests/init.sh
	;;
	'v'|'view') #: view dotfiles file
		less ${binPath}/../${@:2}
	;;
	*)
		>&2 echo 'Unknown subcommand: '$cmd
		${binPath}/dotfiles help
		exit 1
	;;
esac
