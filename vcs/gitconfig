[alias]
	#--list git aliases
	#-# get config values beginning with 'alias.', remove leading 'alias.', truncate to 80 characters
	aliases = !git config --get-regexp '^alias\\.' | sed -E 's/^alias\\.([[:alnum:]-]+)/\\1:/g' | awk 'length > 79{ $0=substr($0,0,79)\"â€¦\"}1'
	amend = commit --amend
	ba = !git branchl
	bl = !git branchl
	#--blame for all files, optionally matching on author name
	blameall = !"cd -- ${GIT_PREFIX:-.} && f(){ (for FILE in $(git ls-files); do tmp=$(git blame -CMw --color-by-age --date='format:%g-%m-%d %H:%M' $FILE | grep -i \" ($*\") && echo \"------------\n$FILE\n------------\n$tmp\n\" ; done | less -FRS) } && f"
	branchl = !"git for-each-ref --color --format='%(color:red)%(HEAD) %(color:reset)%(refname:lstrip=-1)%(color:reset);%(color:green)%(committerdate:format:%y%m%d-%H%M)%(color:reset);%(if)%(push)%(then)[%(color:red)%(upstream:lstrip=-2)%(if)%(upstream:track)%(then) %(color:reset)%(upstream:track)%(end)%(color:reset)] %(end)%(subject)' --sort -committerdate refs/heads/ | column -t -s ';'"
	bump = !git versionbump
	c = !git com
	cho = checkout
	clo = clone
	cm = !git com
	co = checkout
	comadd = !cd -- ${GIT_PREFIX:-.} && git add . && git com
	com = commit -v
	contrib = shortlog --numbered --summary
	count = rev-list HEAD --count
	d = diff
	df = diff
	dp = !git dpull
	dpl = !git dpull
	dpull = !BRANCH=`git branch --show-current` && git fetch && git diff ${BRANCH}..origin/${BRANCH}
	dw = diff --color-words
	h = help
	hash = rev-parse --short HEAD
	i = !"cd -- ${GIT_PREFIX:-.} && (git rev-parse 2>/dev/null && ( \
		echo '==stat' && git status -sb ; \
		[[ $(git rev-parse HEAD 2> /dev/null) != 'HEAD' ]] && echo '==commits' && git --no-pager log --date=format:'%y%m%d-%H%M' --pretty=format:'%C(green)%cd: %C(reset)%s %C(bold brightblue)<%an>%C(bold green)% D%C(brightyellow)% h%C(reset)' -2 --color && echo '' ; \
		[[ $(git submodule status) ]] && echo '==submodules' && git submodule status \
		) | less -FRX) || (echo 'not a git repository' >&2 && exit 1)"
	ii = info
	info = !"cd -- ${GIT_PREFIX:-.} && (git rev-parse 2>/dev/null && ( \
		echo '==stat' && git status -sb ; \
		[[ $(git rev-parse HEAD 2> /dev/null) != 'HEAD' ]] && echo '==branches' && git branchl ; \
		[[ $(git remote -v) ]] && echo '==remotes' && git branch -r --color && git remote -v ; \
		[[ $(git rev-parse HEAD 2> /dev/null) != 'HEAD' ]] && echo '==commits' && git --no-pager log --date=format:'%y%m%d-%H%M' --pretty=format:'%C(green)%cd: %C(reset)%s %C(bold brightblue)<%an>%C(bold green)% D%C(brightyellow)% h%C(reset)' -5 --color && echo '' ; \
		[[ $(git stash list) ]] && echo '==stashes' && git sl --color && echo '' ; \
		[[ $(git tag -l) ]] && echo '==tags' && (git for-each-ref --color --count 5 --sort -creatordate --format='%(color:bold green)%(refname:short)%(color:no-bold brightyellow) %(if)%(*objectname)%(then)%(*objectname:short)%(else)%(objectname:short)%(end)%(color:reset) %(creatordate:short)' refs/tags) ; \
		[[ $(git submodule status) ]] && echo '==submodules' && git submodule status \
		) | less -FRX) || (echo 'not a git repository' >&2 && exit 1)"
	l = log --pretty=format:'%C(green)--%C(reset) %s' --date=short --no-merges
	last = lg -1 --oneline
	lf = !cd -- ${GIT_PREFIX:-.} && git logf
	lg = !cd -- ${GIT_PREFIX:-.} && git logg
	ll = !cd -- ${GIT_PREFIX:-.} && git logg
	lp = !cd -- ${GIT_PREFIX:-.} && git logp
	lpl= !git lpull
	lpull = !cd -- ${GIT_PREFIX:-.} && BRANCH=`git branch --show-current` && git fetch && git logp origin/${BRANCH}..
	logf = !cd -- ${GIT_PREFIX:-.} && gitformat=`git config --get log.baseColors` && git log --date=format:'%Y-%m-%d %H:%M' --name-only --pretty=format:\"%C(green)--%C(reset) ${gitformat}\"
	logg = !cd -- ${GIT_PREFIX:-.} && gitformat=`git config --get log.baseColors` && git log --date=format:'%Y-%m-%d %H:%M' --graph --pretty=format:\" ${gitformat}\"
	logn = !cd -- ${GIT_PREFIX:-.} && git logf
	logp = !cd -- ${GIT_PREFIX:-.} && gitformat=`git config --get log.baseColors` && git log --date=format:'%Y-%m-%d %H:%M' -p --pretty=format:\"%C(brightred)--------------------------------------------------------%C(reset)%n${gitformat}%n%C(brightred)--------------------------------------------------------%C(reset)%n\"
	logpw = !cd -- ${GIT_PREFIX:-.} && git logp --color-words
	lop = !cd -- ${GIT_PREFIX:-.} && git logp
	lopw = !cd -- ${GIT_PREFIX:-.} && git logpw
	m = merge
	m = merge --ff-only
	mirror = clone --mirror
	ph = push
	pha = push --all --follow-tags
	phf = !read -r -p \"Do you really want to force push?: \" tmp && ([[ $tmp =~ ^[Yy] ]] && git push --force-with-lease) || echo 'cancelling'
	phff = !read -r -p \"Do you really want to force push?: \" tmp && ([[ $tmp =~ ^[Yy] ]] && git push --force) || echo 'cancelling'
	pht = push --tags
	pl = pull
	plr = pull --rebase --stat
	pll = pull
	ps = push
	psh = push
	rb = rebase
	rba = rebase --abort
	rbi = rebase --interactive
	#--remove from history
	#-# affects all branches
	#-# will require force pushing if there is an upstream repo
	#-# dangerous, rewrites history with no reverting. may be best done on clone
	#-! does not follow renames.  will need to determine any other matching filenames, preferably before running.  Can we determine this in command and loop through all names?
	remove-from-history = "!cd -- ${GIT_PREFIX:-.} && FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch --force --index-filter \"git update-index --force-remove -- $@\" --prune-empty --tag-name-filter cat -- --all #"
	root = rev-parse --show-toplevel
	s = status -sb
	sb = status -sb
	sd = diff 'stash@{0}' HEAD
	sl = stash list --pretty=format:'%C(yellow)%gd %C(green)%cs%C(reset): %<(70,trunc)%gs'
	sp = stash pop
	spo = stash pop
	spu = stash push
	ss = stash show -p
	st = stash
	stapupo = !git stashpullpop
	stashpullpop = !git stash && git pull && git stash pop
	stat = status
	stl = stash list
	stpupo = !git stashpullpop
	t = tag
	tl = tag -l --sort=-committerdate --format='%(color:bold green)%(refname:short)%(color:no-bold brightyellow) %(if)%(*objectname)%(then)%(*objectname:short)%(else)%(objectname:short)%(end)%(color:reset) %(creatordate:short)'
	uncommit = reset --soft HEAD^
	unstage = reset HEAD
	#-! only works with three number version style with leading "v", eg "v1.2.3", and no "-beta", etc.
	versionbump = !"V=$(git tag --sort=-version:refname --list \"v[0-9]*\" | head -n 1) \
		&& if [ -z \"$V\" ]; then V='0.0.0'; fi \
		&& if [ \"$1\" == '.' ] || [ \"$1\" == 'patch' ]; then \
				awkV='{OFS=\".\"; $NF+=1; print $0}'; \
			elif [ \"$1\" == '..' ] || [ \"$1\" == 'minor' ]; then \
				awkV='{OFS=\".\"; $2+=1; $3=0; print $0}'; \
			elif [ \"$1\" == '...' ] || [ \"$1\" == 'major' ]; then \
				awkV='{OFS=\".\"; $1+=1; $2=0; $3=0; print \"v\"$0}'; \
			else echo 'No version specified.  Specify one of patch, minor, or major.'; exit 1; \
		fi \
		&& if [ -z \"$awkV\" ]; then exit 1; else newV=$(echo $V | awk -F. \"$awkV\"); fi \
		&& read -r -p \"Do you want to tag with version ${newV}?: \" tmp \
		&& ([[ $tmp =~ ^[Yy] ]] && git tag \"${newV}\" \"${@:2}\") && echo \"Tagged version ${newV}\" \
		|| exit 1 #"
		#-# trailing `#` to prevent arguments from being appended
	vb = !git versionbump
	who = contrib
[color]
	status = always
[commit]
	#--show staged diff in commit message editor
	verbose = true
[core]
	#--git log, etc should properly use alt screen of less, not mess up terminal history
	#-@ https://superuser.com/a/367160
	pager = less -+$LESS -R
[help]
	#--prompt to correct misspellings
	autocorrect = prompt
[log]
	#-# colors for aliases above
	baseColors = %s %C(green)(%cd) %C(bold brightblue)<%an> %C(brightyellow)%h %C(brightred)%d%C(reset)
	#--ensure `--follow` option is used when possible
	follow = true
[pager]
	contrib = false
	last = false
	status = false
	#-! we would like alt screen for `stash show`, but this forces no alt screen for all stash subcommands
	stash = less -FX
	tag = less -FX
[user]
	email = public@tobymackenzie.com
	name = Toby Mackenzie
[merge]
	tool = opendiff
[rebase]
	autoStash = true

#-# ideas taken from:
#-@ https://coderwall.com/p/euwpig
#-@ https://github.com/addyosmani/dotfiles/blob/master/.functions
#-@ https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
#-@ https://github.com/voku/dotfiles/blob/master/.gitconfig
